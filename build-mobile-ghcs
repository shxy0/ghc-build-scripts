#!/bin/bash
set -e
# set -x

help_text() {
    echo "Usage:
  ${0##*/} [-h][-d] --prefix=... --iconv=... --libffi=... --clang=... [target1 target2 target3]

Options:

  -h, --help
    display this help and exit

  -d, --debug
    show set values

  --no-clean
    do not clean the tree before building

  --no-configure
    do not run './boot' or './configure'

  --no-install
    do not run 'make install'

  --prefix=<prefix>
    the prefix to pass to configure

  --iconv=<iconv>
    path to iconv.

  --libffi=<libffi>
    path to libffi.

  --clang=<clang>
    path to the clang binary to use
    defaults to 'clang'"
}

# -----------------------------------------------------------------------------
# Helper functions
function cabal_with_new_autoconfig () 
{
    cabal=$1
    pkg=$2
    echo "Building $pkg..."
    CABAL_FLAGS=
    case $pkg in
        *-head) CABAL_FLAGS+=" --source-repository=head"; pkg="${pkg%-*}";;
        *) pkg=$pkg
    esac
    tmp_dir=$(mktemp -d)
    (
        cd "$tmp_dir"
        # use system cabal to get the package, until we are certain that $cabal
        # supports get properly.
        cabal get "$pkg" "$CABAL_FLAGS" || true
        (
            cd "$pkg"*
            # this is rather annoying, but until the upstream pacakges include
            # update config.{guess,sub}, we'll need this hack to make -ios work.
            curl -L -o config.guess "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess"
            curl -L -o config.sub "http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub"
            $cabal install --force-reinstalls
        )
    )
    rm -fR "$tmp_dir"
}
# -----------------------------------------------------------------------------


CLEAN=1     # clean prior to building
CONFIGURE=1 # run ./configure

BUILD=1   # run make
INSTALL=1 # run make install

DEBUG=0 # debug values
DEVEL=0 # Use development snapshot (fro the cross compiler only...)

CLANG=

while [ "$#" -gt 0 ]; 
do
    case "$1" in
        --no-clean)     CLEAN=0;     shift 1;;
        --no-configure) CONFIGURE=0; shift 1;;
        
        --no-build)     BUILD=0;    shift 1;;
        --no-install)   INSTALL=0;  shift 1;;
        
        --with-devel)   DEVEL=1;    shift 1;;
        
        --prefix=*)     PREFIX="${1#*=}";   shift 1;;
        --iconv=*)      ICONV="${1#*=}";    shift 1;;
        --libffi=*)     LIBFFI="${1#*=}";   shift 1;;
        --clang=*)      CLANG="${1#*=}";    shift 1;;
        
        -d|--debug)     DEBUG=1;    shift 1;;
        
        -h|--help)  help_text; exit;;
        -*)         echo "unknown option: $1" >&2; exit 1;;
        *)          args+="$1"; shift 1;;
    esac
done

TARGETS=${args:-"host x86_64-android armv7-android aarch64-android aarch64-ios x86_64-ios arm-raspberrypi"}

if [ $DEBUG -eq 1 ]; 
then
    echo "   PREFIX=$PREFIX"
    echo "    ICONV=$ICONV"
    echo "    CLANG=$CLANG"
    echo "  TARGETS=$TARGETS"
    echo "    CLEAN=$CLEAN"
    echo "CONFIGURE=$CONFIGURE"
    echo "    BUILD=$BUILD"
    echo "    DEVEL=$DEVEL"
    exit
fi

USE_DEVEL_FLAGS=" --enable-bootstrap-with-devel-snapshot --with-ghc=$PWD/_host/stage1/bin/ghc"

for target in $TARGETS
do
    echo "TARGET: $target"
    CONFIGURE_FLAGS=" --disable-large-address-space --disable-ld-override"
    CABAL="cabal"
    CROSS=1

    case $target in
        host)
            MK_FLAVOUR="quick-with-ng"
            CROSS=0
            ;;
        armv7-android)
            CONFIGURE_FLAGS+=" --target=armv7-linux-androideabi"
            CONFIGURE_FLAGS+=" --with-iconv-includes=$ICONV/arm-linux-androideabi/include"
            CONFIGURE_FLAGS+=" --with-iconv-libraries=$ICONV/arm-linux-androideabi/lib"
            if [ ! -z "$LIBFFI" ]; then
                CONFIGURE_FLAGS+=" --with-system-libffi"
                CONFIGURE_FLAGS+=" --with-ffi-includes=$LIBFFI/armv7-linux-androideabi/include"
                CONFIGURE_FLAGS+=" --with-ffi-libraries=$LIBFFI/armv7-linux-androideabi/lib"
            fi
            MK_FLAVOUR="quick-cross-ng"
            CABAL=armv7-linux-androideabi-cabal
            ;;
        aarch64-android)
            CONFIGURE_FLAGS+=" --target=aarch64-linux-android"
            CONFIGURE_FLAGS+=" --with-iconv-includes=$ICONV/aarch64-linux-android/include"
            CONFIGURE_FLAGS+=" --with-iconv-libraries=$ICONV/aarch64-linux-android/lib"
            MK_FLAVOUR="quick-cross-ng"
            CABAL=aarch64-linux-android-cabal
            ;;
        x86_64-android)
            CONFIGURE_FLAGS+=" --target=x86_64-linux-android"
            CONFIGURE_FLAGS+=" --with-iconv-includes=$ICONV/x86_64-linux-android/include"
            CONFIGURE_FLAGS+=" --with-iconv-libraries=$ICONV/x86_64-linux-android/lib"
            MK_FLAVOUR="quick-cross-ng"
            CABAL=x86_64-linux-android-cabal
            ;;
        aarch64-ios)
            CONFIGURE_FLAGS+=" --target=aarch64-apple-ios"
            if [ ! -z "$LIBFFI" ]; then
                CONFIGURE_FLAGS+=" --with-system-libffi"
                CONFIGURE_FLAGS+=" --with-ffi-includes=$LIBFFI/aarch64-apple-ios/include"
                CONFIGURE_FLAGS+=" --with-ffi-libraries=$LIBFFI/aarch64-apple-ios/lib"
            fi
            MK_FLAVOUR="quick-cross-ng"
            CABAL=aarch64-apple-ios-cabal
            ;;
        x86_64-ios)
            # Apples iPhone Simulator SDK does not ship the x86_64 mach-o headers for some
            # reason.  A radar has been filed (#34729561), but no visible action has happened
            # so far.  We can however just copy them over from macos.
            if [ ! -d /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/include/mach-o/x86_64 ]; then
                echo "iPhone Simulator x86_64 SDK is missing mach-o headers; will copy them over from the macos SDK (via sudo)"
                sudo cp -fR /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/mach-o/x86_64 \
                            /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/usr/include/mach-o/
            fi
            CONFIGURE_FLAGS+=" --target=x86_64-apple-ios"
            if [ ! -z "$LIBFFI" ]; then
                CONFIGURE_FLAGS+=" --with-system-libffi"
                CONFIGURE_FLAGS+=" --with-ffi-includes=$LIBFFI/x86_64-apple-ios/include"
                CONFIGURE_FLAGS+=" --with-ffi-libraries=$LIBFFI/x86_64-apple-ios/lib"
            fi
            MK_FLAVOUR="quick-cross-ng"
            CABAL=x86_64-apple-ios-cabal
            ;;
        arm-raspberrypi)
            CONFIGURE_FLAGS+=" --target=arm-linux-gnueabihf"
            if [ ! -z "$LIBFFI" ]; then
                CONFIGURE_FLAGS+=" --with-system-libffi"
                CONFIGURE_FLAGS+=" --with-ffi-includes=$LIBFFI/arm-linux-gnueabihf/include"
                CONFIGURE_FLAGS+=" --with-ffi-libraries=$LIBFFI/arm-linux-gnueabihf/lib"
            fi
            MK_FLAVOUR="quick-cross-ng"
            CABAL=arm-linux-gnueabihf-cabal
            ;;
        *)
            exit "unknown target"
            ;;
    esac

    if [ $CLEAN -eq 1 ]; 
    then
        # drop everything, except for build folders
        make --silent clean && make -s distclean
        git clean -x --force -d --quiet -e "_*"
        git reset --hard HEAD
        git submodule update --init --recursive
        # force -fPIC, otherwise at least aarch64 will break.
        # echo "SRC_HC_OPTS += -fPIC" >> mk/build.mk
        # boot after mk/build.mk, to silence the warning about a missing mk/build.mk
        ./boot --hadrian > /dev/null
    fi

    if [ $DEVEL -eq 1 -o $CROSS -eq 1 ]; then
        echo "Adding devel snapshot flags..."
        CONFIGURE_FLAGS+=$USE_DEVEL_FLAGS
        echo "$CONFIGURE_FLAGS"
    fi
    if [ $CONFIGURE -eq 1 ]; then
        echo "Configuring $target..."
        # the CC_STAGE0 is pretty much a hack, as for what ever
        # reason the ghc --info returns `gcc`.
        echo "CC=$CLANG CC_STAGE0=clang ./configure --silent $CONFIGURE_FLAGS"
        CC=$CLANG CC_STAGE0=clang ./configure --silent $CONFIGURE_FLAGS
    fi
    if [ $BUILD -eq 1 ]; then
        echo "Building $target..."
        GITREV=$(git rev-parse --short HEAD)
        BASE=$(pwd)
        mkdir -p "${BASE}/../ghc-bindist/${GITREV}"
        (cd hadrian && BINARY_DIST_DIR="${BASE}/../ghc-bindist/${GITREV}/" ./build.sh --flavour=$MK_FLAVOUR binary-dist -j --build-root=_${target} || true)
    fi
    echo "TARGET: $target done."
done
